1. Data Generation and Historical Analysis:

import pandas as pd
import numpy as np
from statsmodels.tsa.holtwinters import ExponentialSmoothing

# Simulated historical weather data
historical_data = {
    'Date': pd.date_range(start='2022-01-01', end='2022-12-31'),
    'Temperature': np.random.normal(25, 5, 365),
    'Precipitation': np.random.uniform(0, 1, 365)
}

historical_df = pd.DataFrame(historical_data)

# Function for historical pattern analysis
def analyze_historical_pattern(dataframe):
    # Simulating time-series forecasting using Holt-Winters Exponential Smoothing
    model = ExponentialSmoothing(dataframe['Temperature'], seasonal='add', seasonal_periods=12)
    fit_model = model.fit()

    # Forecasting for the next time period
    forecast = fit_model.forecast(1)
    return forecast.values[0]

# Analyze historical pattern
historical_forecast = analyze_historical_pattern(historical_df)
print(f"Historical Forecast: {historical_forecast}")


2. Real-time Pattern Matching and Alert System:

# Simulated real-time weather data
current_date = pd.to_datetime('2023-01-15')
current_weather = {
    'Date': [current_date],
    'Temperature': [26.0],  # Simulated current temperature
    'Precipitation': [0.2]  # Simulated current precipitation
}

current_df = pd.DataFrame(current_weather)

# Function for real-time pattern matching and alert system
def match_real_time_pattern(historical_df, current_df, threshold_temp=2.0, threshold_precip=0.2):
    # Check if the current temperature is significantly higher than the historical average
    avg_temp = historical_df['Temperature'].mean()
    if current_df['Temperature'].values[0] > avg_temp + threshold_temp:
        print("High temperature detected. Potential calamity alert for sensitive crops!")

    # Check if the current precipitation is significantly higher than the historical average
    avg_precip = historical_df['Precipitation'].mean()
    if current_df['Precipitation'].values[0] > avg_precip + threshold_precip:
        print("Heavy precipitation detected. Potential calamity alert for flooding!")

# Match real-time pattern and trigger alerts
match_real_time_pattern(historical_df, current_df)



